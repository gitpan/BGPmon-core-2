.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Fetch::Client 3"
.TH BGPmon::Fetch::Client 3 "2013-11-01" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Fetch::Client
.PP
The BGPmon Client module, to connect to BGPmon and receive XML messages 
one at a time.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The BGPmon::Client module provides functionality to connect to a bgpmon 
instance and read one \s-1XML\s0 message at a time.
.PP
.Vb 9
\&    use BGPmon::Fetch::Client;
\&    my $ret = connect_bgpmon();
\&    set_timeout($time_out_seconds);
\&    my $xml_msg = read_xml_message();
\&    my $ret = is_connected();
\&    my $num_read = messages_read();
\&    my $uptime = uptime();
\&    my $ret = close_connection();
\&    my $downtime = connection_endtime();
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
init_bgpdata
connect_bgpmon
set_timeout
read_xml_message
close_connection
is_connected
messages_read
uptime
connection_endtime
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "init_bgpdata"
.IX Subsection "init_bgpdata"
Initializes the client module. Takes no arguments.
.SS "set_timeout"
.IX Subsection "set_timeout"
Sets the socket timeout value in seconds. Takes one argument \- 
the timeout value in seconds.
.SS "connect_bgpmon"
.IX Subsection "connect_bgpmon"
This function connects to the BGPmon server. If the connection succeeds, the 
function attempts to read the starting <xml> tag from the BGPmon server. If 
that succeeds, the created socket is returned. If not, the function returns 
undef.
.SS "read_xml_message"
.IX Subsection "read_xml_message"
This function reads one xml message at a time from the BGPmon \s-1XML\s0 stream.
.SS "close_connection"
.IX Subsection "close_connection"
Function to close open files and sockets.
.SS "is_connected"
.IX Subsection "is_connected"
Function to report whether currently connected to BGPmon.
.SS "messages_read"
.IX Subsection "messages_read"
Get number of messages read.
.SS "uptime"
.IX Subsection "uptime"
Returns number of seconds the connection has been up.
If the connection is down, return 0.
.SS "connection_endtime"
.IX Subsection "connection_endtime"
Returns the time the connection ended .
If the connection is up, return 0.
.SS "read_n_bytes"
.IX Subsection "read_n_bytes"
This function reads exactly n bytes from a connection.
returns undef on any error or connection close
.SS "get_error_code"
.IX Subsection "get_error_code"
Get the error code for a given function
Input : the name of the function whose error code we should report
Output: the function's error code
        or \s-1ARGUMENT_ERROR\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
Usage:  my \f(CW$err_code\fR = get_error_code(\*(L"connect_archive\*(R");
.SS "get_error_message {"
.IX Subsection "get_error_message {"
Get the error message of a given function
Input : the name of the function whose error message we should report
Output: the function's error message
        or \s-1ARGUMENT_ERROR\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
Usage:  my \f(CW$err_msg\fR = get_error_message(\*(L"read_xml_message\*(R");
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Shorthand call for get_error_message
.SH "AUTHOR"
.IX Header "AUTHOR"
Kaustubh Gadkari, \f(CW\*(C`<kaustubh at cs.colostate.edu>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to 
\&\f(CW\*(C`bgpmon at netsec.colostate.edu\*(C'\fR, or through the web interface at 
<http://bgpmon.netsec.colostate.edu>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc BGPmon::Client
.Ve
.SH "LICENSE AND COPYRIGHT Copyright (c) 2012 Colorado State University"
.IX Header "LICENSE AND COPYRIGHT Copyright (c) 2012 Colorado State University"
.Vb 8
\&    Permission is hereby granted, free of charge, to any person
\&    obtaining a copy of this software and associated documentation
\&    files (the "Software"), to deal in the Software without
\&    restriction, including without limitation the rights to use,
\&    copy, modify, merge, publish, distribute, sublicense, and/or
\&    sell copies of the Software, and to permit persons to whom
\&    the Software is furnished to do so, subject to the following
\&    conditions:
\&
\&    The above copyright notice and this permission notice shall be
\&    included in all copies or substantial portions of the Software.
\&
\&    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\&    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
\&    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\&    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
\&    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
\&    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
\&    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
\&    OTHER DEALINGS IN THE SOFTWARE.\e
\&
\&
\&  File: Client.pm
\&  Authors: Kaustubh Gadkari, Dan Massey, Cathie Olschanowsky
\&  Date: 13 October 2012
.Ve
