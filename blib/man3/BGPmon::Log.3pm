.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Log 3"
.TH BGPmon::Log 3 "2013-11-01" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Log \- BGPmon Logging
.PP
This module implements logging for BGPmon clients. The module can log messages
to syslog, STDERR,  or a user specified log file.   It allows the user to
specify a log level and write log messages using different log levels.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
After initializing the log,  the user can log messages at different log levels.
.PP
use BGPmon::Log qw (debug
                    log_debug
                    log_info
                    log_notice
                    log_warn log_warning
                    log_err  log_error
                    log_fatal log_crit log_critical
                    log_alert
                    log_emerg log_emergency
                   );
.PP
my \f(CW%log_param\fR = ( prog_name => \*(L"my name\*(R",
                  log_level => \fIBGPmon::Log::LOG_DEBUG()\fR,
                  log_facility => \fIBGPmon::Log::LOG_LOCAL0()\fR,
                  log_file => \*(L"./mylog\*(R",
                  use_syslog => 0,
                  use_gmt => 0,
                );
.PP
if (BGPmon::Log::log_init(%log_param) ) {
    my \f(CW$code\fR = BGPmon::Log::get_error_code(\*(L"log_init\*(R");
    my \f(CW$msg\fR = BGPmon::Log::get_error_message(\*(L"log_init\*(R");
    print \s-1STDERR\s0 \*(L"Error initializing log: \f(CW$code\fR \- \f(CW$msg\fR\en\*(R";
    exit 1;
}
.PP
debug(\*(L"Log a message with level BGPmon::Log::LOG_DEBUG\*(R");
.PP
log_debug(\*(L"Also log a message with level BGPmon::Log::LOG_DEBUG\*(R");
.PP
log_info(\*(L"Log a message, level BGPmon::Log::LOG_INFO\*(R");
.PP
log_notice(\*(L"Log a message, level BGPmon::Log::LOG_NOTICE\*(R");
.PP
log_warn(\*(L"Log a message, level BGPmon::Log::LOG_WARN\*(R");
.PP
log_warning(\*(L"Log a message, level BGPmon::Log::LOG_WARNING\*(R");
.PP
log_err(\*(L"Log a message, level BGPmon::Log::LOG_ERR\*(R");
.PP
log_error(\*(L"Log a message, level BGPmon::Log::LOG_ERROR\*(R");
.PP
log_fatal(\*(L"Log a message, level BGPmon::Log::LOG_FATAL\*(R");
.PP
log_crit(\*(L"Log a message, level BGPmon::Log::LOG_CRIT\*(R");
.PP
log_critical(\*(L"Log a message, level BGPmon::Log::LOG_CRITICAL\*(R");
.PP
log_alert(\*(L"Log a message, level BGPmon::Log::LOG_ALERT\*(R");
.PP
log_emergency(\*(L"Log a message, level BGPmon::Log::LOG_EMERGENCY\*(R");
.PP
log_emerg(\*(L"Log a message, level BGPmon::Log::LOG_EMERG\*(R");
.PP
\&\fIBGPmon::Log::log_close()\fR;
.SH "EXPORT"
.IX Header "EXPORT"
log_init
log_close
log_emerg
log_emergency
log_alert
log_fatal
log_crit
log_critical
log_err
log_error
log_warn
log_warning
log_notice
log_info
log_debug
debug
get_errror_code
get_error_message
get_error_msg
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "log_init"
.IX Subsection "log_init"
Initialize the logging facility.   This function must be called prior to using
any log_* functions.
.PP
Input : The log settings
       1. prog_name \- The program name
       2. log_level \- the log level
       3. log_facility \- the log facility
       4. log_file \-  the file where log messages will be written
       5. use_syslog \- flag indicating whether to use syslog, 1 = use syslog,
       5. use_gmt \- flag indicating whether to \s-1GMT\s0 for time or use local time,
             1 = use \s-1GMT\s0,  use_gmt can only be set when use_syslog = 0
Output: returns 0 on success,  1 on error and setserror_message and error_code
.PP
If use_syslog=1,  all log messages are written to syslog.
  if the user sets both use_syslog=1 and provides a log_file,  the log_file
  is ignored.
.PP
If use_syslog != 1,  log messages are written to the log_file,  if provided
  if no log file is provided to init,  all messages are written to \s-1STDERR\s0
.SS "log_close"
.IX Subsection "log_close"
Closes the logfile so no further log messages can be written
You must call log_init again to re-enable logging.
.PP
Typically called at the end of program to cleanly close the log file
or cleanly close the connection to syslog.
.PP
Input: None
Output: None
.SS "log_emerg"
.IX Subsection "log_emerg"
Logs an emergency message.  Log levels \s-1LOG_EMERG\s0
.PP
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_emergency"
.IX Subsection "log_emergency"
Logs an emergency message.  Log levels \s-1LOG_EMERGENCY\s0
.PP
This function is identical to log_emerg
.SS "log_alert"
.IX Subsection "log_alert"
Logs an alert message.  Log levels \s-1LOG_ALERT\s0
.PP
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_fatal Logs a fatal error message.  Log levels \s-1LOG_CRIT\s0"
.IX Subsection "log_fatal Logs a fatal error message.  Log levels LOG_CRIT"
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_crit Logs a critical error message.  Log levels \s-1LOG_CRIT\s0"
.IX Subsection "log_crit Logs a critical error message.  Log levels LOG_CRIT"
This function is identical to log_fatal
.SS "log_critical"
.IX Subsection "log_critical"
Logs a critical error message.  Log levels \s-1LOG_CRIT\s0
.PP
This function is identical to log_fatal
.SS "log_err"
.IX Subsection "log_err"
Logs an error message.  Log level \s-1LOG_ERR\s0.
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_error"
.IX Subsection "log_error"
Logs an error message.  Log level \s-1LOG_ERR\s0.
.PP
This function is identical to log_fatal
.SS "log_warn"
.IX Subsection "log_warn"
Logs a warning message.  Log level \s-1LOG_WARN\s0
This function is identical to log_fatal
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_warning"
.IX Subsection "log_warning"
Logs a warning message.  Log level \s-1LOG_WARNING\s0
.PP
This function is identical to log_warn
.SS "log_notice"
.IX Subsection "log_notice"
Logs a notice message.  Log level \s-1LOG_NOTICE\s0
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_info"
.IX Subsection "log_info"
Logs a informational message.  Log level \s-1LOG_INFO\s0
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "log_debug"
.IX Subsection "log_debug"
Logs a debug message.  Log level \s-1LOG_DEBUG\s0
Input: Message to be printed.
Output: returns 0 on success,  1 on error and sets error_message and error_code
.SS "debug"
.IX Subsection "debug"
Logs a debug message.  Log level \s-1LOG_DEBUG\s0
.PP
This function is identical to log_debug
.SS "get_error_code"
.IX Subsection "get_error_code"
Get the error code
Input : the name of the function whose error code we should report
Output: the function's error code
        or \s-1NO_FUNCTION_SPECIFIED\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
.SS "get_error_message"
.IX Subsection "get_error_message"
Get the error message
Input : the name of the function whose error message we should report
Output: the function's error message
        or \s-1NO_FUNCTION_SPECIFIED\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Get the error message
.PP
This function is identical to get_error_message
.SS "\s-1RETURN\s0 \s-1VALUES\s0 \s-1AND\s0 \s-1ERROR\s0 \s-1CODES\s0"
.IX Subsection "RETURN VALUES AND ERROR CODES"
All functions return 0 on success and 1 on error.
In the event of an error,   an error code and error
message can be obtained using
  \f(CW$code\fR = get_error_code(\*(L"function_name\*(R");
  \f(CW$msg\fR = get_error_msg(\*(L"function_name\*(R");
.PP
The following error codes are defined:
.PP
.Vb 2
\& 0 \- No Error:
\&     \*(AqNo Error\*(Aq
\&
\& 1 \- No Function Specified in get_error_code/get_error_msg
\&    \*(AqError reporting function called without specifying the function.\*(Aq
\&
\& 2 \- Invalid Funtion in get_error_code/get_error_msg
\&    \*(AqError reporting function called with invalid function name\*(Aq
\&
\& 3 \- Failed To Obtain Hostname in log_init
\&    \*(AqUnable to get the hostname\*(Aq
\&
\& 4 \- Program Name Exceeds Max Length in log_init
\&    \*(AqProgram name exceeds maximum length of MAX_STRING_LEN\*(Aq
\&
\& 5 \- Program Name Contains Non\-Printable Characters in log_init
\&    \*(AqProgram name contains non\-printable characters\*(Aq
\&
\& 6 \- Log Level Is Not A Number in log_init
\&    \*(AqLog level must be a postive integer\*(Aq
\&
\& 7 \- Log Level Is Out of Range in log_init
\&    \*(AqLog level must be between LOG_EMERG and LOG_DEBUG\*(Aq
\&
\& 8 \- Log Facility Is Not A Number in log_init
\&    \*(AqLog facility must be a postive integer\*(Aq
\&
\& 9 \- Log File Name Exceeds Max Length in log_init
\&    \*(AqLog file exceeds maximum length of MAX_STRING_LEN\*(Aq
\&
\& 10 \- Log File Name Contains Non\-Printable Characters in log_init
\&    \*(AqLog file contains non\-printable characters\*(Aq
\&
\& 11 \- Use_syslog Is Not A Number in log_init
\&    \*(Aquse_syslog must be 0 or 1\*(Aq
\&
\& 12 \- Use_syslog Is Not 0 or 1 in log_init
\&    \*(Aquse_syslog must be 0 or 1\*(Aq
\&
\& 13 \- Use_gmt Is Not A Number in log_init
\&    \*(Aquse_gmt must be 0 or 1\*(Aq
\&
\& 14 \- Use_gmt Is Not 0 or 1 in log_init
\&    \*(Aquse_gmt must be 0 or 1\*(Aq
\&
\& 15 \- Use_gmt Set When Use_syslog = 1 in log_init
\&    \*(Aquse_gmt not allowed when use_syslog = 1\*(Aq
\&
\& 16 \- Specified Both Syslog and Log File in log_init
\&   \*(AqUnable to both use_syslog and write to file \*(Aq;
\&
\& 17 \- Unable To Open Syslog in log_init
\&   \*(AqUnable To open syslog\*(Aq;
\&
\& 18 \- Unable To Open Log File in log_init
\&   \*(AqUnable to open log file\*(Aq;
\&
\& 19 \- Log Function Called Before Log Initialized
\&   \*(AqLogging not initialized.   Use init_log() prior to calling log_*("msg")\*(Aq;
\&
\& 20 \-No Such Log Function Exists
\&   \*(AqNo such log function \*(Aq;
\&
\& 21 \- No Message to Log
\&   \*(AqLog function called with no log message\*(Aq;
\&
\& 22 \- Log Message Exceeds Maximum Length
\&    \*(AqLog message exceeds maximum length of \*(Aq.MAX_STRING_LEN;
\&
\& 23 \- Log Message Contains Non\-Printable Characters
\&    \*(AqMessage name contains non\-printable characters\*(Aq
\&
\& 24 \- Failed to Write Log Message
\&   \*(AqUnable to write log messsage \*(Aq;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Dan Massey, \f(CW\*(C`<massey at cs.colostate.edu>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to 
\&\f(CW\*(C`<bgpmon@netsec.colostate.edu>\*(C'\fR.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc BGPmon::Log
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012 Colorado State University
.PP
.Vb 8
\&    Permission is hereby granted, free of charge, to any person
\&    obtaining a copy of this software and associated documentation
\&    files (the "Software"), to deal in the Software without
\&    restriction, including without limitation the rights to use,
\&    copy, modify, merge, publish, distribute, sublicense, and/or
\&    sell copies of the Software, and to permit persons to whom
\&    the Software is furnished to do so, subject to the following
\&    conditions:
\&
\&    The above copyright notice and this permission notice shall be
\&    included in all copies or substantial portions of the Software.
\&
\&    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\&    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
\&    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\&    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
\&    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
\&    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
\&    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
\&    OTHER DEALINGS IN THE SOFTWARE.\e
\&
\&    File: Log.pm
\&
\&    Authors: M. Lawrence Weikum, Kaustubh Gadkari, Dan Massey, Cathie Olschanowsky
\&    Date: 13 October 2013
.Ve
