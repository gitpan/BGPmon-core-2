.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Configure 3"
.TH BGPmon::Configure 3 "2013-11-01" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Configure \- BGPmon Client Configuration
.PP
This module sets initial configuration variables from a combination of default 
values,  configuration file parameters, and command line options.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The module allows one to specify a set of configuration parameters and the 
module sets these parameters based on a cominbation of default vaules,  
command line options,  and configuration file settings.   The module does the 
work of parsing the commmand line,  generating any usage messages,  and 
reading a configuration file.    You simply specify the input paramters you 
would like to allow in the configuation file and on the commmand line.
.PP
To specify a parameter,  you must provide a parameter Name and parameter Type.    
Possible Types are \s-1ADDRESS\s0,  \s-1PORT\s0, \s-1FILE\s0, \s-1BOOLEAN\s0, \s-1STRING\s0, and \s-1UNSIGNED_INT\s0.
.PP
Once you have specified the paramters,   the configure function will take 
care of generating command line arguements and will generate any usage errors 
if the user does not specify correct command line options.
.PP
You may optionally specify a Description and your description text will appear 
after this option in any Usage message.
.PP
The configure function will also read from a configuration file.  Note that 
values set by the command line take precedence and over-ride any settings 
found in the configuration file.  The user can specify the configuration file 
with \-c file or with \-config_file file.
.PP
You may also specify a Default configuration file or specify a Default for any 
other option.  Settings found in the configutaion file and command line take 
precedence over any default settings.
.PP
Once you have specified your parameters and called configure(%your_params),  
you can use get_paramter(\*(L"param_name\*(R") to get the value of any paramter.   
You can also call parameter_set_by(\*(L"param_name\*(R") to see if the parameter 
was set using the default,  the config file,  or the command line 
(or was not set at all).
.PP
Finally,  if you want to later over-ride any parameter,  you can set it to 
a value using set_parameter(\*(L"param_name\*(R", value).   This is not recommended.   
You should rely on your defaults,  the config file, and the command line 
to set your parameters.  But set_parameter is provided as option in case 
special cases need it.
.PP
Example:
.PP
use BGPmon::Configure;
# lets define some parameters for my program
my \f(CW@params\fR = (
    {
        Name     => BGPmon::Configure::CONFIG_FILE_PARAMETER_NAME,
        Type   => BGPmon::Configure::FILE,
        Default => \*(L"./foo\*(R",
        Description => \*(L"this is the configuration file name\*(R",
    },
    {
        Name     => \*(L"server\*(R",
        Type   => BGPmon::Configure::ADDRESS,
        Default => \*(L"127.0.0.1\*(R",
        Description => \*(L"this is the server address\*(R",
    },
    {
        Name     => \*(L"port\*(R",
        Type   => BGPmon::Configure::PORT,
        Default => 50002,
        Description => \*(L"this is the server port\*(R",
    },
    {
        Name     => \*(L"output_file\*(R",
        Type   => BGPmon::Configure::FILE,
        Default => \*(L"/tmp/file\*(R",
        Description => \*(L"My Output File\*(R",
    },
    {
        Name     => \*(L"use_syslog\*(R",
        Type   => BGPmon::Configure::BOOLEAN,
        Description => \*(L"Use Syslog for error checking\*(R",
    },
    {
        Name     => \*(L"somestring\*(R",
        Type   => BGPmon::Configure::STRING,
        Default => \*(L"This is a string used for something\*(R",
    },
    {
        Name     => \*(L"log_level\*(R",
        Type   => BGPmon::Configure::UNSIGNED_INT,
        Default => 7,
    }
);
.PP
# now tell the module to set those parameters
.PP
if (BGPmon::Configure::configure(@params) ) {
    my \f(CW$code\fR = BGPmon::Configure::get_error_code(\*(L"configure\*(R");
    my \f(CW$msg\fR = BGPmon::Configure::get_error_message(\*(L"configure\*(R");
    print \*(L"Error Code is \f(CW$code\fR and message is \f(CW$msg\fR \en\*(R";
    exit;
}
.PP
# let's see what parameter \*(L"server\*(R" got set to
.PP
my \f(CW$srv\fR = BGPmon::Configure::parameter_value(\*(L"server\*(R");
if (defined($srv)) {
    print \*(L"The server parameter was set to \f(CW$srv\fR\en\*(R";
}
.PP
# let's see how parameter \*(L"server\*(R" was set
.PP
my \f(CW$setby\fR = BGPmon::Configure::parameter_set_by(\*(L"server\*(R");
if ($setby == BGPmon::Configure::NOT_SET) {
    print \*(L"The server parameter has not been set\en\*(R";
} elsif ($setby == BGPmon::Configure::DEFAULT) {
    print \*(L"The server parameter was set to the default value \en\*(R";
} elsif ($setby == BGPmon::Configure::COMMAND_LINE) {
    print \*(L"The user set the server parameter from the command line\en\*(R";
} elsif ($setby == BGPmon::Configure::CONFIG_FILE) {
    print \*(L"The server parameter was set in the configuration file\en\*(R";
} elsif ($setby == BGPmon::Configure::SET_ERROR) {
    print \*(L"something went wrong...  the parameter has an error\en\*(R";
}
.PP
# this is not recommended,  but we can over-ride that setting and 
change the parameter value
.PP
my \f(CW$new_srv\fR = \*(L"127.0.0.1\*(R";
.PP
if (BGPmon::Configure::set_parameter(\*(L"server\*(R", \f(CW$new_srv\fR) ) {
    my \f(CW$code\fR = BGPmon::Configure::get_error_code(\*(L"set_parameter\*(R");
    my \f(CW$msg\fR = BGPmon::Configure::get_error_message(\*(L"set_parameter\*(R");
    print \*(L"Error Code is \f(CW$code\fR and message is \f(CW$msg\fR \en\*(R";
    exit;
}
.PP
if (BGPmon::Configure::parameter_set_by(\*(L"server\*(R") == 
    BGPmon::Configure::SET_FUNCTION ) {
    print \*(L"I over-rode everything and set the server parameter to \f(CW$new_srv\fR\en\*(R";
}
.SH "EXPORT"
.IX Header "EXPORT"
configure
parameter_value
parameter_set_by
set_parameter
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "configure"
.IX Subsection "configure"
set initial configuration variables from a combination of default values,   
configuration file parameters,  and command line options
.PP
Input : an array of hashes that specify the configuration parameters.    
        Each configuration parameter is represented by one hash with elements:
       1. Name \- (required) the name of the paramter 
             as it will appear in the command line and configuration file
       2. Type \- (required) the type of value associated with this name.   
             supported types include address, port, boolean, unsigned integer.  
       3. Default (optional) \- the default value to associate with this 
              parameter if it is not found in the config file or command line
       4. Description (optional) \- A description to appear in a usage message
.PP
Output:  0 on success,  1 on error and error code and error message are set
.SS "parameter_value"
.IX Subsection "parameter_value"
Return the  setting for a configuraion parameter
.PP
Input : the name of the paramter
.PP
Output:  the value of the parameter.    
         if the input name does not correspond to a parameter, 
         the function returns undef and sets error code and error message
.SS "parameter_set_by"
.IX Subsection "parameter_set_by"
.Vb 9
\& indicates how the parameter value was set.   
\&Input : the name of the paramter
\&Output:  one of the following codes indicating how the parameter was set:
\&    \- not set at all (NOT_SET), 
\&    \- set to a default value (DEFAULT), 
\&    \- set by the command line (COMMAND_LINE),  
\&    \- set by the configuraiton file (CONFIG_FILE),  
\&    \- set externally using the set_paramater function (SET_FUNCTION)
\&    \- or  on error,  (SET_ERROR) and the error_code and error_message are set
.Ve
.SS "set_parameter"
.IX Subsection "set_parameter"
.Vb 1
\& Sets a parameter to the specified value.  
\&
\& Configuration parameters are typically set by a combination of default value,  
\& command line options, and configuration file options.   This function allows 
\& the caller to over\-ride all this and force a parameter to the specified value.
.Ve
.PP
Input : the name of the paramter and the value for the paramter
Output: 0 on success,  1 on error and sets error_code and error_message
.SS "get_error_code"
.IX Subsection "get_error_code"
Get the error code
Input : the name of the function whose error code we should report
Output: the function's error code 
        or \s-1NO_FUNCTION_SPECIFIED\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
.SS "get_error_message"
.IX Subsection "get_error_message"
Get the error message
Input : the name of the function whose error message we should report
Output: the function's error message
        or \s-1NO_FUNCTION_SPECIFIED\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Get the error message
.PP
This function is identical to get_error_message
.SS "\s-1RETURN\s0 \s-1VALUES\s0 \s-1AND\s0 \s-1ERROR\s0 \s-1CODES\s0"
.IX Subsection "RETURN VALUES AND ERROR CODES"
configure and set_parameter return 0 on success and 1 on error.
.PP
parameter_value returns the value on success and undef on error.
.PP
parameter_set_by returns an integer indicating who set the value
 and on error it returns BGPmon::Configure::SET_ERROR
.PP
In the event of an error,   an error code and error
message can be obtained using 
  \f(CW$code\fR = get_error_code(\*(L"function_name\*(R");
  \f(CW$msg\fR = get_error_msg(\*(L"function_name\*(R");
.PP
The following error codes are defined:
.PP
.Vb 2
\& 0 \- No Error
\&    \*(AqNo Error\*(Aq
\&
\& 1 \- No Function Specified in get_error_code/get_error_msg.
\&    \*(AqError reporting function called without specifying the function.\*(Aq
\&
\& 2 \- Invalid Funtion in get_error_code/get_error_msg.
\&    \*(AqError reporting function called with invalid function name\*(Aq
\&
\& 3 \- There wasn\*(Aqt a name specified in get_error_code/get_error_msg.
\&     \*(AqNo parameter name specified\*(Aq
\& 
\& 4 \- Input was not a valid parameter coe in get_error_code/get_error_msg.
\&     \*(AqInvalid parameter name\*(Aq
\&
\& 5 \- No value has been assigned to the paramter.
\&     \*(AqNo value has been assigned to this parameter\*(Aq
\& 
\& 6 \- The parameter must be given a Set By command but wasn\*(Aqt.
\&     \*(AqThe SetBy field of the parameter is undefined\*(Aq
\& 
\& 7 \- Invalid SetBy field was given.
\&     \*(AqThe SetBy field of the parameter is invalid.\*(Aq
\&
\& 8 \- An invalid value was given for a parameter.
\&     \*(AqInvalid value for parameter\*(Aq
\&
\& 9 \- There were no parameters to create.
\&     \*(AqError creating the paramter \- missing parameter hash\*(Aq;
\&
\& 10 \- The parameter is missing a name.
\&      \*(AqError creating the paramter \- parameter name is missing\*(Aq
\&
\& 11 \- The parameter is missing a type.
\&      \*(AqError creating the paramter \- parameter name is missing\*(Aq
\&
\& 12 \- The parameter was given an invalid type.
\&      \*(AqError creating the paramter \- invalid type \*(Aq
\&
\& 13 \- The parameter was given an invalid or unsupported element in the hash.
\&      \*(AqError creating the paramter \- invalid element \*(Aq
\&
\& 14 \- The default attribute given for a parameter is invalid.
\&      \*(AqError creating the paramter \- invalid default value \*(Aq
\&
\& 15 \- The name of the parameter is a reserved name and cannot be used. 
\&      \*(AqError creating the paramter \- parameter name \-h and \-help are reserved\*(Aq
\&
\& 16 \- The configuration file could not be opened.
\&      \*(AqError creating the paramter \- config file must be type FILE\*(Aq
\&
\& 17 \- Parameter wasn\*(Aqt given an GetOpt command.
\&      \*(AqUnable to construct usage message for command line\*(Aq
\&
\& 19 \- The configuration file could not be found.
\&      \*(AqConfiguration file not found\*(Aq
\&
\& 20 \- Failed to open the configuration file.
\&      \*(AqFailed to open configuration file\*(Aq;
\&
\& 21 \- There was in invalid line in the configuration file.
\&      \*(AqInvalid line in configuration file: \*(Aq;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
M.Lawrence Weikum, \f(CW\*(C`<mweikum at rams.colostate.edu>\*(C'\fR
Dan Massey, \f(CW\*(C`<massey at cs.colostate.edu>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bgpmon@netsec.colostate.edu>\*(C'\fR.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc BGPmon::Configure
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012 Colorado State University
.PP
.Vb 8
\&    Permission is hereby granted, free of charge, to any person
\&    obtaining a copy of this software and associated documentation
\&    files (the "Software"), to deal in the Software without
\&    restriction, including without limitation the rights to use,
\&    copy, modify, merge, publish, distribute, sublicense, and/or
\&    sell copies of the Software, and to permit persons to whom
\&    the Software is furnished to do so, subject to the following
\&    conditions:
\&
\&    The above copyright notice and this permission notice shall be
\&    included in all copies or substantial portions of the Software.
\&
\&    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\&    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
\&    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\&    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
\&    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
\&    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
\&    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
\&    OTHER DEALINGS IN THE SOFTWARE.\e
\&
\&    File: Configure.pm
\&
\&    Authors: M. Lawrence Weikum, Dan Massey
\&    
\&    Date: 13 October 2013
.Ve
