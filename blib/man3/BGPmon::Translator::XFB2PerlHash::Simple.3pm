.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Translator::XFB2PerlHash::Simple 3"
.TH BGPmon::Translator::XFB2PerlHash::Simple 3 "2013-11-01" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Translator::XFB2PerlHash::Simple \- a clean interface to extract
commonly\-used information from XFB messages.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use BGPmon::Translator::XFB2PerlHash::Simple;
.PP
print get_error_msg('init') if !init('/XML/MESSAGE/TO/PARSE');
.PP
my \f(CW$scalar_result\fR = \fIget_timestamp()\fR;
.PP
print \f(CW$scalar_result\fR;
.PP
my \f(CW@array_result\fR = \fIget_nlri()\fR;
.PP
\&\fIdo_something()\fR foreach my \f(CW$nlri\fR (@array_result)...
.PP
my \f(CW$hash_ref_result\fR = \fIget_peering()\fR;
.PP
print \f(CW$hash_ref_result\fR\-{'element'}\-{'subelement'}\-{'attribute'};
.SH "EXPORT"
.IX Header "EXPORT"
init get_timestamp get_dateTime get_nlri get_mp_nlri get_withdrawn 
get_mp_withdrawn get_peering get_origin get_as_path get_as4_path get_next_hop 
get_mp_next_hop get_xml_string get_error_code get_error_message get_error_msg 
get_xml_message_type get_status
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "init"
.IX Subsection "init"
This function takes an \s-1XML\s0 message to be translated and internally converts it
to an appropriate data structure for querying.
.PP
.Vb 1
\&   Input:      The message to be translated
\&
\&   Output:     1 on success, 0 on failure
.Ve
.SS "get_error_code"
.IX Subsection "get_error_code"
Get the error code
.PP
Input : the name of the function whose error code we should report
.PP
Output: the function's error code 
        or \s-1NO_FUNCTION_SPECIFIED\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
.SS "get_error_message"
.IX Subsection "get_error_message"
Get the error message
.PP
Input : the name of the function whose error message we should report
.PP
Output: the function's error message
        or \s-1NO_FUNCTION_SPECIFIED\s0 if the user did not supply a function
        or \s-1INVALID_FUNCTION_SPECIFIED\s0 if the user provided an invalid function
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Get the error message
.PP
This function is identical to get_error_message
.SS "get_timestamp"
.IX Subsection "get_timestamp"
Returns the \s-1UNIX\s0 timestamp from an \s-1XFB\s0 message as a scalar.
.SS "get_dateTime"
.IX Subsection "get_dateTime"
Returns the human-readable timestamp from an \s-1XFB\s0 message as a scalar.
.SS "get_xml_message_type"
.IX Subsection "get_xml_message_type"
Returns the type of message we're seeing \- if it's from a live stream or if
it's from a \s-1RIB\s0 dump from a BGPmon source.
.SS "get_origin"
.IX Subsection "get_origin"
Returns the stringified origin of the \s-1BGP\s0 message.  Defined values are given in
the \s-1XFB\s0 specification.
.SS "get_next_hop"
.IX Subsection "get_next_hop"
Returns a scalar IPv4 address in dotted-decimal notation as given in the next 
hop attribute.
.SS "get_xml_string"
.IX Subsection "get_xml_string"
Returns the raw \s-1XML\s0 string passed into init
.SS "get_status"
.IX Subsection "get_status"
Returns the status message in the \s-1XML\s0 if it exists
.SS "get_mp_next_hop"
.IX Subsection "get_mp_next_hop"
Returns an array of hashes with the next hop(s) from the \s-1MP_REACH\s0 attribute.
.PP
Ex:     my \f(CW@ret\fR = \fIget_mp_next_hop()\fR;
        print my \f(CW$addr\fR\-{'\s-1ADDRESS\s0'}\-{'content'} foreach \f(CW$addr\fR (@ret);
.SS "get_nlri"
.IX Subsection "get_nlri"
Returns an array of hashes.  Each of these hashes are structured like so:
.PP
{
    '\s-1SAFI\s0' = {
                'value' = '1',
                'content' = '\s-1UNICAST\s0'
              },
    '\s-1AFI\s0' = {
                'value' = '1',
                'content' = '\s-1IPV4\s0'
             },
    '\s-1ADDRESS\s0' = {
                'content' = '192.168.0.0/16'
                 }
.PP
}
.SS "get_withdrawn"
.IX Subsection "get_withdrawn"
Returns an array of hashes which contain an \s-1AFI\s0,SAFI,and withdrawn IPv4 prefix.
These hashes are structured just like the ones described in the documentation
for \fIget_nlri()\fR.
.SS "get_as_path"
.IX Subsection "get_as_path"
Returns an array of hashes that contains the \s-1AS\s0 path attribute of the message.
Each hash represents a single \s-1AS\s0 Segment, which can be either an \s-1AS_SEQUENCE\s0
or \s-1AS_SET\s0.  Each \s-1AS_SEG\s0 has an \s-1AS\s0 subarray that contains the ASNs for that 
segment.
.SS "get_as4_path"
.IX Subsection "get_as4_path"
Returns an array of hashes that contains the \s-1AS4_PATH\s0 attribute of the message.
Each hash represents a single \s-1AS\s0 Segment, which can be either an \s-1AS_SEQUENCE\s0
or \s-1AS_SET\s0.  Each \s-1AS_SEG\s0 has an \s-1AS\s0 subarray that contains the ASNs for that 
segment.
.SS "get_mp_nlri"
.IX Subsection "get_mp_nlri"
Returns an array of hashes which contain an \s-1AFI\s0,SAFI,and announced prefix. 
These hashes are structured just like the ones described in the documentation
for \fIget_nlri()\fR.
.SS "get_mp_withdrawn"
.IX Subsection "get_mp_withdrawn"
Returns an array of hashes which contain an \s-1AFI\s0,SAFI,and withdrawn prefix.
These hashes are structured just like the ones described in the documentation
for \fIget_nlri()\fR.
.SS "get_peering"
.IX Subsection "get_peering"
Returns a hash reference that contains information about the \s-1BGP\s0 peering
session that the message was received from.  To see its contents, check the 
\&\s-1XFB\s0 specification or use Data::Dumper.
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
 \f(CW\*(C`bgpmon at netsec.colostate.edu\*(C'\fR, or through
the web interface at <http://bgpmon.netsec.colostate.edu>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc BGPmon::Translator::XFB2PerlHash::Simple
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012 Colorado State University
.PP
.Vb 8
\&    Permission is hereby granted, free of charge, to any person
\&    obtaining a copy of this software and associated documentation
\&    files (the "Software"), to deal in the Software without
\&    restriction, including without limitation the rights to use,
\&    copy, modify, merge, publish, distribute, sublicense, and/or
\&    sell copies of the Software, and to permit persons to whom
\&    the Software is furnished to do so, subject to the following
\&    conditions:
\&
\&    The above copyright notice and this permission notice shall be
\&    included in all copies or substantial portions of the Software.
\&
\&    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\&    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
\&    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\&    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
\&    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
\&    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
\&    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
\&    OTHER DEALINGS IN THE SOFTWARE.\e
\&
\&    File: Simple.pm
\&
\&    Authors: M. Lawrence Weikum, Jason Bartlett
\&    Date: 13 October 2013
.Ve
