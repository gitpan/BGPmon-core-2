.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BGPmon::Translator::XFB2PerlHash::Simpler 3"
.TH BGPmon::Translator::XFB2PerlHash::Simpler 3 "2013-11-01" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BGPmon::Translator::XFB2PerlHash::Simpler \- a cleaner interface to extract 
commonly\-used information from XFB messages that, unline XFB2PerlHash::Simple, 
will ignore xml attributes.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use BGPmon::Translator::XFB2PerlHash::Simpler;
\&
\&  my $xml_message = "...
\&
\&  if(BGPmon::Translator::XFB2PerlHash::Simpler::parse_xml_msg($xml_message)){
\&
\&    print BGPmon::Translator::SFB2PerlHash::get_error_msg(\*(Aqparse_xml_msg\*(Aq)."\en";
\&
\&    exit 1;
\&
\&  }
\&
\&  my @withdrawn_prefixes = BGPmon::Translator::XFB2PerlHash::get_withdraw();
\&
\&  foreach(@withdrawn_prefixes){
\&
\&    ...
\&
\&  }
\&
\&  my $peer_address = BGPmon::Translator::XFB2PerlHash::extract_sender_addr();
\&
\&  print "Seen at peer $peer_address\en";
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
get_error_msg get_error_code parse_xml_msg  extract_sender_addr 
extract_sender_port extract_sender_asn extract_withdraw extract_nlri 
extract_mpreach_nlri extract_mpunreach_nlri extract_aspath extract_as4path
extract_origin
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "get_error_msg"
.IX Subsection "get_error_msg"
Will return the error message of the given function name.
.PP
Input:  A string that contains the function name where an error occured.
.PP
Output: The message which represents the error stored from that function.
.SS "get_error_code"
.IX Subsection "get_error_code"
Will return the error code of the given function name.
.PP
Input:  A string that represents the function name where an error occured.
.PP
Output: The code which represents the error stored from that function.
.SS "parse_xml_msg"
.IX Subsection "parse_xml_msg"
Will translate an \s-1XML\s0 message from a string to a perl hash
.PP
Input:  An \s-1XML\s0 string from a BGPmon source
.PP
Output: 0 if parsing completed successfully
.SS "extract_sender_addr"
.IX Subsection "extract_sender_addr"
Will extract a sender's \s-1IP\s0 address from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: IPv4/6 Address if successful; undef if not.
.SS "extract_sender_port"
.IX Subsection "extract_sender_port"
Will extract a sender's port number from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: Port number if successful; undef if not.
.SS "extract_sender_asn"
.IX Subsection "extract_sender_asn"
Will extract a sender's \s-1ASN\s0 number from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: \s-1ASN\s0 number if successful; undef if not.
.SS "extract_withdraw"
.IX Subsection "extract_withdraw"
Will extract all the withdrawn prefixes from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: Array of IPv4/6 prefixes that were seen to have been withdrawn.
.SS "extract_nlri"
.IX Subsection "extract_nlri"
Will extract all the prefixes in \s-1NLRI\s0 areas from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: Array of IPv4 prefixes that were seen in NLRIs.
.SS "extract_mpreach_nlri"
.IX Subsection "extract_mpreach_nlri"
Will extract all the IPv4/6 prefixes announced in \s-1MP_REACH_NLRI\s0's from 
the parsed \s-1XML\s0 mesage.  This will exclude the \s-1MP_REACH\s0 \s-1NEXT_HOP\s0.
.PP
Input:  None
.PP
Output: Array of IPv4/6 prefixes that were seen in \s-1MP_REACH_NLRI\s0's
.SS "extract_mpunreach_nlri"
.IX Subsection "extract_mpunreach_nlri"
Will extract all the IPv4/6 prefixes withdrawn in \s-1MP_UNREACH_NLRI\s0's from 
the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: Array of IPv4/6 prefixes that were seen in \s-1MP_UNREACH_NLRI\s0's
.SS "extract_aspath"
.IX Subsection "extract_aspath"
Will extract all the ASNs found in either \s-1AS_PATH/AS_SET\s0 or \s-1AS_PATH/AS_SEQUENCE\s0
from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: Array of ASNs found in the \s-1AS_PATH\s0  path attribute.
.SS "extract_as4path"
.IX Subsection "extract_as4path"
Will extract all the ASNs found in either \s-1AS4_PATH/AS_SET\s0 or 
\&\s-1AS4_PATH/AS_SEQUENCE\s0 from the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: Array of ASNs found in the \s-1AS4_PATH\s0  path attribute.
.SS "extract_origin"
.IX Subsection "extract_origin"
Will extract the \s-1ASN\s0 where the message was announced 
from within the parsed \s-1XML\s0 mesage.
.PP
Input:  None
.PP
Output: The \s-1ASN\s0 of the origin \s-1AS\s0; undef if there is none.
.SH "ERROR CODES AND MESSAGES"
.IX Header "ERROR CODES AND MESSAGES"
The following error codes and messages are defined:
.PP
0:  There isn't an error.  'No Error. Relax with some tea.'
.PP
200:  Run parse_xml_message first. \*(L"There was no \s-1XML\s0 message given.\*(R"
.PP
201:  Invalid xml message given \*(L"The \s-1XML\s0 message given was blank.\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
M. Lawrence Weikum \f(CW\*(C`<mweikum at rams.colostate.edu>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requeues to 
\&\f(CW\*(C`bgpmon at netsec.colostate.edu\*(C'\fR or through the web interface
at <http://bgpmon.netsec.colostate.edu>.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation on this module with the perldoc command.
.PP
perldoc BGPmon::Filter
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012 Colorado State University
.PP
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the \*(L"Software\*(R"), to deal in
the Software without restriction, including without limitation the rights to 
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
of the Software, and to permit persons to whom the Software is furnished to do 
so, subject to the following conditions:
.PP
.Vb 2
\&  The above copyright notice and this permission notice shall be
\&  included in all copies or substantial portions of the Software.
\&
\&  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
\&  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
\&  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
\&  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
\&  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
\&  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
\&  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
\&  OTHER DEALINGS IN THE SOFTWARE.\e
\&
\&  File: Simpler.pm
\&  Authors: M. Lawrence Weikum
\&  Date: 13 October 2013
.Ve
